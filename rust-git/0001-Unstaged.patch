diff --git a/configure b/configure
index a8bd3ac..3ed667d 100755
--- a/configure
+++ b/configure
@@ -1477,11 +1477,11 @@ then
     msg "git: submodule status"
     "${CFG_GIT}" submodule status --recursive
 
-    msg "git: submodule clobber"
-    "${CFG_GIT}" submodule foreach --recursive git clean -dxf
-    need_ok "git failed"
-    "${CFG_GIT}" submodule foreach --recursive git checkout .
-    need_ok "git failed"
+    #msg "git: submodule clobber"
+    #"${CFG_GIT}" submodule foreach --recursive git clean -dxf
+    #need_ok "git failed"
+    #"${CFG_GIT}" submodule foreach --recursive git checkout .
+    #need_ok "git failed"
 
     cd ${CFG_BUILD_DIR}
 fi
diff --git a/src/libpanic_unwind/gcc.rs b/src/libpanic_unwind/gcc.rs
index 33b24fb..97d147e 100644
--- a/src/libpanic_unwind/gcc.rs
+++ b/src/libpanic_unwind/gcc.rs
@@ -294,6 +294,7 @@ unsafe extern "C" fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {
 #[cfg(all(target_os="windows", target_arch = "x86", target_env="gnu"))]
 pub mod eh_frame_registry {
     #[link(name = "gcc_eh")]
+    #[link(name = "pthread")]
     #[cfg(not(cargobuild))]
     extern "C" {}
 
diff --git a/src/librustc_llvm/ffi.rs b/src/librustc_llvm/ffi.rs
index 50c68d5..be6dd53 100644
--- a/src/librustc_llvm/ffi.rs
+++ b/src/librustc_llvm/ffi.rs
@@ -2068,4 +2068,7 @@ extern {
 // during llvm-config?
 #[cfg(windows)]
 #[link(name = "ole32")]
+#[link(name = "ffi")]
+#[link(name = "gcc_eh")]
+#[link(name = "pthread")]
 extern {}
diff --git a/src/librustc_trans/back/link.rs b/src/librustc_trans/back/link.rs
index 288249a..78e2b7d 100644
--- a/src/librustc_trans/back/link.rs
+++ b/src/librustc_trans/back/link.rs
@@ -1115,9 +1115,11 @@ fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) {
     // we're just getting an ordering of crate numbers, we're not worried about
     // the paths.
     let crates = sess.cstore.used_crates(LinkagePreference::RequireStatic);
-    for (cnum, _) in crates {
+    for (cnum, path) in crates {
         let libs = sess.cstore.native_libraries(cnum);
+        let mut lib_names = "".to_string();
         for &(kind, ref lib) in &libs {
+            lib_names = lib_names + lib + " ";
             match kind {
                 NativeLibraryKind::NativeUnknown => cmd.link_dylib(lib),
                 NativeLibraryKind::NativeFramework => cmd.link_framework(lib),
@@ -1126,5 +1128,8 @@ fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) {
                 }
             }
         }
+        if sess.verbose() {
+            sess.note_without_error(&format!("{:?} {}", path, lib_names));
+        }
     }
 }
diff --git a/src/libunwind/build.rs b/src/libunwind/build.rs
index fd446f5..1fb48d7 100644
--- a/src/libunwind/build.rs
+++ b/src/libunwind/build.rs
@@ -35,5 +35,6 @@ fn main() {
         println!("cargo:rustc-link-lib=gcc_pic");
     } else if target.contains("windows-gnu") {
         println!("cargo:rustc-link-lib=gcc_eh");
+        println!("cargo:rustc-link-lib=pthread");
     }
 }
diff --git a/src/libunwind/libunwind.rs b/src/libunwind/libunwind.rs
index 3900ba6..3922ddc 100644
--- a/src/libunwind/libunwind.rs
+++ b/src/libunwind/libunwind.rs
@@ -263,5 +263,7 @@ if #[cfg(not(all(target_os = "ios", target_arch = "arm")))] {
            link(name = "c++abi"))]
 #[cfg_attr(all(target_os = "windows", target_env = "gnu"),
            link(name = "gcc_eh"))]
+#[cfg_attr(all(target_os = "windows", target_env = "gnu"),
+           link(name = "pthread"))]
 #[cfg(not(cargobuild))]
 extern "C" {}
diff --git a/src/rust-installer b/src/rust-installer
--- a/src/rust-installer
+++ b/src/rust-installer
@@ -1 +1 @@
-Subproject commit 755bc3db4ff795865ea31b5b4f38ac920d8acacb
+Subproject commit 755bc3db4ff795865ea31b5b4f38ac920d8acacb-dirty
