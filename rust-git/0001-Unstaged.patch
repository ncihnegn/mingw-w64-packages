diff --git a/configure b/configure
index 6cef35b..6f01d08 100755
--- a/configure
+++ b/configure

@@ -1464,17 +1464,17 @@ then
         "${CFG_GIT}" submodule deinit src/jemalloc
     fi
 
-    msg "git: submodule update"
-    "${CFG_GIT}" submodule update
-    need_ok "git failed"
+    #msg "git: submodule update"
+    #"${CFG_GIT}" submodule update
+    #need_ok "git failed"
 
     msg "git: submodule foreach sync"
     "${CFG_GIT}" submodule foreach --recursive 'if test -e .gitmodules; then git submodule sync; fi'
     need_ok "git failed"
 
-    msg "git: submodule foreach update"
-    "${CFG_GIT}" submodule update --recursive
-    need_ok "git failed"
+    #msg "git: submodule foreach update"
+    #"${CFG_GIT}" submodule update --recursive
+    #need_ok "git failed"
 
     # NB: this is just for the sake of getting the submodule SHA1 values
     # and status written into the build log.
@@ -1484,8 +1484,8 @@ then
     msg "git: submodule clobber"
     "${CFG_GIT}" submodule foreach --recursive git clean -dxf
     need_ok "git failed"
-    "${CFG_GIT}" submodule foreach --recursive git checkout .
-    need_ok "git failed"
+    #"${CFG_GIT}" submodule foreach --recursive git checkout .
+    #need_ok "git failed"
 
     cd ${CFG_BUILD_DIR}
 fi
diff --git a/src/libpanic_unwind/gcc.rs b/src/libpanic_unwind/gcc.rs
index 33b24fb..97d147e 100644
--- a/src/libpanic_unwind/gcc.rs
+++ b/src/libpanic_unwind/gcc.rs
@@ -294,6 +294,7 @@ unsafe extern "C" fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {
 #[cfg(all(target_os="windows", target_arch = "x86", target_env="gnu"))]
 pub mod eh_frame_registry {
     #[link(name = "gcc_eh")]
+    #[link(name = "pthread")]
     #[cfg(not(cargobuild))]
     extern "C" {}
 
diff --git a/src/librustc_llvm/ffi.rs b/src/librustc_llvm/ffi.rs
index 50c68d5..be6dd53 100644
--- a/src/librustc_llvm/ffi.rs
+++ b/src/librustc_llvm/ffi.rs
@@ -2068,4 +2068,7 @@ extern {
 // during llvm-config?
 #[cfg(windows)]
 #[link(name = "ole32")]
+#[link(name = "ffi")]
+#[link(name = "gcc_eh")]
+#[link(name = "pthread")]
 extern {}
diff --git a/src/librustc_trans/back/link.rs b/src/librustc_trans/back/link.rs
index 5a8c5cb..30744d7 100644
--- a/src/librustc_trans/back/link.rs
+++ b/src/librustc_trans/back/link.rs
@@ -1118,9 +1118,11 @@ fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) {
     // we're just getting an ordering of crate numbers, we're not worried about
     // the paths.
     let crates = sess.cstore.used_crates(LinkagePreference::RequireStatic);
-    for (cnum, _) in crates {
+    for (cnum, path) in crates {
         let libs = sess.cstore.native_libraries(cnum);
+        let mut lib_names = "".to_string();
         for &(kind, ref lib) in &libs {
+            lib_names = lib_names + lib + " ";
             match kind {
                 NativeLibraryKind::NativeUnknown => cmd.link_dylib(lib),
                 NativeLibraryKind::NativeFramework => cmd.link_framework(lib),
@@ -1129,5 +1131,8 @@ fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) {
                 }
             }
         }
+        if sess.verbose() {
+            sess.note_without_error(&format!("{:?} {}", path, lib_names));
+        }
     }
 }
diff --git a/src/libunwind/build.rs b/src/libunwind/build.rs
index e1ddf8b..2924799 100644
--- a/src/libunwind/build.rs
+++ b/src/libunwind/build.rs
@@ -35,5 +35,6 @@ fn main() {
         println!("cargo:rustc-link-lib=gcc_pic");
     } else if target.contains("windows-gnu") {
         println!("cargo:rustc-link-lib=gcc_eh");
+        println!("cargo:rustc-link-lib=pthread");
     }
 }
diff --git a/src/libunwind/libunwind.rs b/src/libunwind/libunwind.rs
index c2edf75..c913244 100644
--- a/src/libunwind/libunwind.rs
+++ b/src/libunwind/libunwind.rs
@@ -264,5 +264,7 @@ if #[cfg(not(all(target_os = "ios", target_arch = "arm")))] {
            link(name = "c++abi"))]
 #[cfg_attr(all(target_os = "windows", target_env = "gnu"),
            link(name = "gcc_eh"))]
+#[cfg_attr(all(target_os = "windows", target_env = "gnu"),
+           link(name = "pthread"))]
 #[cfg(not(cargobuild))]
 extern "C" {}
