diff --git a/src/bootstrap/dist.rs b/src/bootstrap/dist.rs
index 1d3445a..e30b33e 100644
--- a/src/bootstrap/dist.rs
+++ b/src/bootstrap/dist.rs
@@ -307,9 +307,10 @@ pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {
     let src = build.stage_out(compiler, Mode::Libstd).join(target).join("release").join("deps");
 
     let image_src = src.join("save-analysis");
-    let dst = image.join("lib/rustlib").join(target).join("analysis");
-    t!(fs::create_dir_all(&dst));
-    cp_r(&image_src, &dst);
+    let dst = image.join("lib/rustlib").join(target);
+    let dst_src = dst.join("analysis");
+    t!(fs::create_dir_all(&dst_src));
+    cp_r(&image_src, &dst_src);
 
     let mut cmd = Command::new("sh");
     cmd.arg(sanitize_sh(&build.src.join("src/rust-installer/gen-installer.sh")))
@@ -323,14 +324,14 @@ pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {
        .arg(format!("--component-name=rust-analysis-{}", target))
        .arg("--legacy-manifest-dirs=rustlib,cargo");
     build.run(&mut cmd);
-    t!(fs::remove_dir_all(&image));
 
     // Create plain source tarball
     let mut cmd = Command::new("tar");
     cmd.arg("-czf").arg(sanitize_sh(&distdir(build).join(&format!("{}.tar.gz", name))))
        .arg("analysis")
-       .current_dir(&src);
+       .current_dir(&dst);
     build.run(&mut cmd);
+    t!(fs::remove_dir_all(&image));
 }
 
 /// Creates the `rust-src` installer component and the plain source tarball
diff --git a/src/libpanic_unwind/gcc.rs b/src/libpanic_unwind/gcc.rs
index 73264fa..26f4ace 100644
--- a/src/libpanic_unwind/gcc.rs
+++ b/src/libpanic_unwind/gcc.rs
@@ -299,6 +299,7 @@ unsafe extern "C" fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {
 #[cfg(all(target_os="windows", target_arch = "x86", target_env="gnu"))]
 pub mod eh_frame_registry {
     #[link(name = "gcc_eh")]
+    #[link(name = "pthread")]
     #[cfg(not(cargobuild))]
     extern "C" {}
 
diff --git a/src/librustc_llvm/ffi.rs b/src/librustc_llvm/ffi.rs
index a6b2fe4..48f14b5 100644
--- a/src/librustc_llvm/ffi.rs
+++ b/src/librustc_llvm/ffi.rs
@@ -1651,4 +1651,7 @@ extern "C" {
 // during llvm-config?
 #[cfg(windows)]
 #[link(name = "ole32")]
+#[link(name = "ffi")]
+#[link(name = "gcc_eh")]
+#[link(name = "pthread")]
 extern "C" {}
diff --git a/src/libunwind/build.rs b/src/libunwind/build.rs
index db41a36..83bbae2 100644
--- a/src/libunwind/build.rs
+++ b/src/libunwind/build.rs
@@ -35,6 +35,7 @@ fn main() {
         println!("cargo:rustc-link-lib=gcc_pic");
     } else if target.contains("windows-gnu") {
         println!("cargo:rustc-link-lib=gcc_eh");
+        println!("cargo:rustc-link-lib=pthread");
     } else if target.contains("fuchsia") {
         println!("cargo:rustc-link-lib=unwind");
     }
diff --git a/src/libunwind/libunwind.rs b/src/libunwind/libunwind.rs
index bbac6c0..e0a58ef 100644
--- a/src/libunwind/libunwind.rs
+++ b/src/libunwind/libunwind.rs
@@ -266,5 +266,7 @@ if #[cfg(not(all(target_os = "ios", target_arch = "arm")))] {
            link(name = "c++abi"))]
 #[cfg_attr(all(target_os = "windows", target_env = "gnu"),
            link(name = "gcc_eh"))]
+#[cfg_attr(all(target_os = "windows", target_env = "gnu"),
+           link(name = "pthread"))]
 #[cfg(not(cargobuild))]
 extern "C" {}
